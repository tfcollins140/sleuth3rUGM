This output was generated by Perl program "xlist_functions"
            at  Thu Apr  6 10:05:58 2006     
-------------------------------------------------------------


The SLEUTH modules are:
=======================

--> coeff_obj.c
--> color_obj.c
--> deltatron.c
--> driver.c
--> gdif_obj.c
--> grid_obj.c
--> growth.c
--> igrid_obj.c
--> input.c
--> landclass_obj.c
--> main.c
--> memory_obj.c
--> output.c
--> pgrid_obj.c
--> proc_obj.c
--> random.c
--> scenario_obj.c
--> spread.c
--> stats_obj.c
--> timer_obj.c
--> transition_obj.c
--> utilities.c
--> wgrid_obj.c




=======================

The member functions for each module are listed below:






---> MODULE NAME:     coeff_obj.c  <---
==============================================


** FUNCTION NAME: coeff_SetCurrentDiffusion
** PURPOSE:       set the diffusion field

** FUNCTION NAME: coeff_SetCurrentSpread
** PURPOSE:       set the spread field of current_coefficient struct

** FUNCTION NAME: coeff_SetCurrentBreed
** PURPOSE:       set breed field of current_coefficient struct

** FUNCTION NAME: coeff_SetCurrentSlopeResist
** PURPOSE:       set slope_resistance field of current_coefficient struct

** FUNCTION NAME: coeff_SetCurrentRoadGravity
** PURPOSE:       set road_gravity field of current_coefficient

** FUNCTION NAME: coeff_SetStepDiffusion
** PURPOSE:       set diffusion field of step_coeff struct

** FUNCTION NAME: coeff_SetStepSpread
** PURPOSE:       set spread of step_coeff struct

** FUNCTION NAME: coeff_SetStepBreed
** PURPOSE:       set breed field of step_coeff

** FUNCTION NAME: coeff_SetStepSlopeResist
** PURPOSE:       set slope_resistance field of step_coeff

** FUNCTION NAME: coeff_SetStepRoadGravity
** PURPOSE:       set road_gravity field of step_coeff struct

** FUNCTION NAME: diffusion
** PURPOSE:       set diffusion field of start_coeff struct

** FUNCTION NAME: coeff_SetStartSpread
** PURPOSE:       set spread field of start_coeff

** FUNCTION NAME: coeff_SetStartBreed
** PURPOSE:       set breed field of start_coeff

** FUNCTION NAME: coeff_SetStartSlopeResist
** PURPOSE:       set slope_resistance field of start_coeff

** FUNCTION NAME: coeff_SetStartRoadGravity
** PURPOSE:       set road_gravity field of start_coeff

** FUNCTION NAME: coeff_SetStopDiffusion
** PURPOSE:       set diffusion field of stop_coeff

** FUNCTION NAME: coeff_SetStopSpread
** PURPOSE:       set spread field of stop_coeff

** FUNCTION NAME: coeff_SetStopBreed
** PURPOSE:       set breed field of stop_coeff

** FUNCTION NAME: coeff_SetStopSlopeResist
** PURPOSE:       set slope_resistance field of stop_coeff

** FUNCTION NAME: coeff_SetStopRoadGravity
** PURPOSE:       set road_gravity field of stop_coeff

** FUNCTION NAME: coeff_SetBestFitDiffusion
** PURPOSE:       set diffusion field of best_fit_coeff

** FUNCTION NAME: coeff_SetBestFitSpread
** PURPOSE:       set spread field of best_fit_coeff

** FUNCTION NAME: coeff_SetBestFitBreed
** PURPOSE:       set breed field of best_fit_coeff

** FUNCTION NAME: coeff_SetBestFitSlopeResist
** PURPOSE:       set slope_resistance field of best_fit_coeff

** FUNCTION NAME: coeff_SetBestFitRoadGravity
** PURPOSE:       set road_gravity field of best_fit_coeff

** FUNCTION NAME: coeff_SetSavedDiffusion
** PURPOSE:       set diffusion field of saved_coefficient

** FUNCTION NAME: coeff_SetSavedSpread
** PURPOSE:       set spread field of saved_coefficient

** FUNCTION NAME: coeff_SetSavedBreed
** PURPOSE:       set breed field of saved_coefficient

** FUNCTION NAME: coeff_SetSavedSlopeResist
** PURPOSE:       set slope_resistance field of saved_coefficient

** FUNCTION NAME: coeff_SetSavedRoadGravity
** PURPOSE:       set road_gravity field of saved_coefficient

** FUNCTION NAME: coeff_GetSavedDiffusion
** PURPOSE:       return diffusion from saved_coefficient struct

** FUNCTION NAME: coeff_GetSavedSpread
** PURPOSE:       return spread from saved_coefficient struct

** FUNCTION NAME: coeff_GetSavedBreed
** PURPOSE:       return breed from saved_coefficient struct

** FUNCTION NAME: coeff_GetSavedSlopeResist
** PURPOSE:       return slope_resistance from saved_coefficient struct

** FUNCTION NAME: coeff_GetSavedRoadGravity
** PURPOSE:       return road_gravity from saved_coefficient struct

** FUNCTION NAME: coeff_GetCurrentDiffusion
** PURPOSE:       return diffusion from current_coefficient struct

** FUNCTION NAME: coeff_GetCurrentSpread
** PURPOSE:       return spread from current_coefficient struct

** FUNCTION NAME: coeff_GetCurrentBreed
** PURPOSE:       return breed from current_coefficient struct

** FUNCTION NAME: coeff_GetCurrentSlopeResist
** PURPOSE:       return slope_resistance from current_coefficient struct

** FUNCTION NAME: coeff_GetCurrentRoadGravity
** PURPOSE:       return road_gravity from current_coefficient struct

** FUNCTION NAME: coeff_GetStepDiffusion
** PURPOSE:       return diffusion from step_coeff struct

** FUNCTION NAME: coeff_GetStepSpread
** PURPOSE:       return spread from step_coeff struct

** FUNCTION NAME: coeff_GetStepBreed
** PURPOSE:       return breed from step_coeff struct

** FUNCTION NAME: coeff_GetStepSlopeResist
** PURPOSE:       return slope_resistance from step_coeff struct

** FUNCTION NAME: coeff_GetStepRoadGravity
** PURPOSE:       return road_gravity from step_coeff struct

** FUNCTION NAME: coeff_GetStartDiffusion
** PURPOSE:       return diffusion from start_coeff struct

** FUNCTION NAME: coeff_GetStartSpread
** PURPOSE:       return spread from start_coeff struct

** FUNCTION NAME: coeff_GetStartBreed
** PURPOSE:       return breed from start_coeff struct

** FUNCTION NAME: coeff_GetStartSlopeResist
** PURPOSE:       return slope_resistance from start_coeff struct

** FUNCTION NAME: coeff_GetStartRoadGravity
** PURPOSE:       return road_gravity from start_coeff struct

** FUNCTION NAME: coeff_GetStopDiffusion
** PURPOSE:       return diffusion from stop_coeff struct

** FUNCTION NAME: coeff_GetStopSpread
** PURPOSE:       return spread from stop_coeff struct

** FUNCTION NAME: coeff_GetStopBreed
** PURPOSE:       return breed from stop_coeff struct

** FUNCTION NAME: coeff_GetStopSlopeResist
** PURPOSE:       return slope_resistance from stop_coeff struct

** FUNCTION NAME: coeff_GetStopRoadGravity
** PURPOSE:       return road_gravity from stop_coeff struct

** FUNCTION NAME: coeff_GetBestFitDiffusion
** PURPOSE:       return diffusion from best_fit_coeff struct

** FUNCTION NAME: coeff_GetBestFitSpread
** PURPOSE:       return spread from best_fit_coeff struct

** FUNCTION NAME: coeff_GetBestFitBreed
** PURPOSE:       return breed from best_fit_coeff struct

** FUNCTION NAME: coeff_GetBestFitSlopeResist
** PURPOSE:       return slope_resistance from best_fit_coeff struct

** FUNCTION NAME: coeff_GetBestFitRoadGravity
** PURPOSE:       return road_gravity from best_fit_coeff struct

** FUNCTION NAME: coeff_MemoryLog
** PURPOSE:       log pointers to memory locations to file descriptor fp

** FUNCTION NAME: coeff_LogSaved
** PURPOSE:       log values in saved_coefficient struct to file descriptor fp

** FUNCTION NAME: coeff_LogCurrent
** PURPOSE:       log values in current_coefficient to file descriptor fp

** FUNCTION NAME: coeff_LogStep
** PURPOSE:       log values in step_coeff struct to file descriptor fp

** FUNCTION NAME: coeff_LogStart
** PURPOSE:       log values in start_coeff struct to file descriptor fp

** FUNCTION NAME: coeff_LogStop
** PURPOSE:       log values in stop_coeff struct to file descriptor fp

** FUNCTION NAME: coeff_LogBestFit
** PURPOSE:       log values in best_fit_coeff struct to file descriptor fp

** FUNCTION NAME: coeff_ConcatenateFiles
** PURPOSE:       concatenate coefficient files for a given run

** FUNCTION NAME: coeff_WriteCurrentCoeff
** PURPOSE:       write current coefficients to a coefficient file

** FUNCTION NAME: coeff_CreateCoeffFile
** PURPOSE:       creates a coefficient file for the current run

** FUNCTION NAME: coeff_SelfModication
** PURPOSE:       performs self modification of parameters






---> MODULE NAME:     color_obj.c  <---
==============================================


** FUNCTION NAME: color_GetColortable
** PURPOSE:       returns pointer to a selected colortable

** FUNCTION NAME: color_Init
** PURPOSE:       main driver for initializing the colortables

** FUNCTION NAME: color_fill
** PURPOSE:       initializes RGB values for each colortable

** FUNCTION NAME: color_LogIt
** PURPOSE:       logs the colortable values on file descriptor fp

** FUNCTION NAME: color_MemoryLog
** PURPOSE:       log the memory locations on file descriptor fp






---> MODULE NAME:     deltatron.c  <---
==============================================


** FUNCTION NAME: delta_deltatron
** PURPOSE:       main driver which calls delta_phase1 & delta_phase2

** FUNCTION NAME: delta_phase1
** PURPOSE:       performs deltatron phase 1 growth

** FUNCTION NAME: delta_get_new_landuse
** PURPOSE:       determines new landuse to transition to

** FUNCTION NAME: delta_phase2
** PURPOSE:       performs phase 2 deltatron growth






---> MODULE NAME:     driver.c  <---
==============================================


** FUNCTION NAME: drv_driver
** PURPOSE:       main function for driving the simulation grw_growth()

** FUNCTION NAME: drv_monte_carlo
** PURPOSE:       Monte Carlo loop

** FUNCTION NAME: drv_fmatch
** PURPOSE:       calculate fmatch






---> MODULE NAME:     gdif_obj.c  <---
==============================================


** FUNCTION NAME: gdif_WriteColorKey
** PURPOSE:       write colorkeys for a given colortable

** FUNCTION NAME: gdif_WriteGIF
** PURPOSE:       interface to GD for writing an GIF image

** FUNCTION NAME: gdif_ReadGIF
** PURPOSE:       interface to GD for reading an GIF image






---> MODULE NAME:     grid_obj.c  <---
==============================================


** FUNCTION NAME: grid_SetMinMax
** PURPOSE:       find the min and max for a given grid

** FUNCTION NAME: grid_histogram
** PURPOSE:       histogram the values in a grid

** FUNCTION NAME: grid_dump
** PURPOSE:       dump some of the values pertaining to a given grid






---> MODULE NAME:     growth.c  <---
==============================================


** FUNCTION NAME: grw_grow
** PURPOSE:       loop over simulated years

** FUNCTION NAME: grw_landuse_init
** PURPOSE:       initial variables for doing landuse

** FUNCTION NAME: grw_landuse
** PURPOSE:       routine for handling landuse type of processing

** FUNCTION NAME: grw_non_landuse
** PURPOSE:       routine for handling non landuse processing

** FUNCTION NAME: grw_completion_status
** PURPOSE:       write completion status on FILE* fp






---> MODULE NAME:     igrid_obj.c  <---
==============================================


** FUNCTION NAME: igrid_MemoryLog
** PURPOSE:       write out memory map to FILE* fp

** FUNCTION NAME: igrid_GetIGridRoadPixelCount
** PURPOSE:       get road year pixel count by date

** FUNCTION NAME: igrid_GetIGridExcludedPixelCount
** PURPOSE:       return the # of excluded pixels

** FUNCTION NAME: igrid_GetIGridRoadPercentage
** PURPOSE:       return the % of road pixels for a given year

** FUNCTION NAME: igrid_GetIGridCount
** PURPOSE:       return the # of igrids (or input grids)

** FUNCTION NAME: igrid_GetNumRows
** PURPOSE:       return the # rows in a grid

** FUNCTION NAME: igrid_GetNumCols
** PURPOSE:       return the # cols in a grid

** FUNCTION NAME: igrid_GetNumTotalPixels
** PURPOSE:       return the total # pixels in grid

** FUNCTION NAME: igrid_GetUrbanYear
** PURPOSE:       return urban date as a digit for a given urban index

** FUNCTION NAME: igrid_GetLanduseYear
** PURPOSE:       return landuse date as a digit for a given landuse index

** FUNCTION NAME: igrid_GetUrbanCount
** PURPOSE:       return the # of urban grids

** FUNCTION NAME: igrid_GetLocation
** PURPOSE:       return location string for this scenario

** FUNCTION NAME: igrid_GridRelease
** PURPOSE:       release the memory used by a grid

** FUNCTION NAME: igrid_GetUrbanGridPtr
** PURPOSE:       return ptr to urban data

** FUNCTION NAME: igrid_GetRoadGridPtr
** PURPOSE:       return ptr to road grid data

** FUNCTION NAME: igrid_GetUrbanGridPtrByYear
** PURPOSE:       return ptr to urban grid data by year

** FUNCTION NAME: igrid_GetRoadGridPtrByYear
** PURPOSE:       return ptr to road grid data by year

** FUNCTION NAME: igrid_GetLanduseGridPtr
** PURPOSE:       return ptr to landuse grid data by index

** FUNCTION NAME: igrid_GetSlopeGridPtr
** PURPOSE:       return ptr to slope grid data

** FUNCTION NAME: igrid_GetExcludedGridPtr
** PURPOSE:       return ptr to excluded grid data

** FUNCTION NAME: igrid_GetBackgroundGridPtr
** PURPOSE:       return ptr to background grid data

** FUNCTION NAME: igrid_Debug
** PURPOSE:       a debug routine which can be called at various places

** FUNCTION NAME: igrid_Dump
** PURPOSE:       dump the values in a grid

** FUNCTION NAME: igrid_NormalizeRoads
** PURPOSE:       normalizes road grids

** FUNCTION NAME: igrid_ValidateGrids
** PURPOSE:       validate all input grid values

** FUNCTION NAME: igrid_ValidateUrbanGrids
** PURPOSE:       check the validity of the urban grids

** FUNCTION NAME: igrid_ValidateRoadGrids
** PURPOSE:       check the validity of the road grids

** FUNCTION NAME: igrid_ValidateLanduseGrids
** PURPOSE:       check validity of landuse grid values

** FUNCTION NAME: igrid_ValidateSlopeGrid
** PURPOSE:       check validity of slope grid values

** FUNCTION NAME: igrid_ValidateExcludedGrid
** PURPOSE:       check validity of excluded grid values

** FUNCTION NAME: igrid_ValidateBackgroundGrid
** PURPOSE:       check validity of background grid values

** FUNCTION NAME: igrid_ReadGrid
** PURPOSE:       read input grid

** FUNCTION NAME: igrid_ReadFiles
** PURPOSE:       read input grids

** FUNCTION NAME: igrid_init
** PURPOSE:       initialize some variables

** FUNCTION NAME: igrid_SetLocation
** PURPOSE:       set the location string variable

** FUNCTION NAME: igrid_SetFilenames
** PURPOSE:       set the filenames of the input files

** FUNCTION NAME: igrid_SetGridSizes
** PURPOSE:       scan the input GIFs for size and other parameters

** FUNCTION NAME: igrid_LogIt
** PURPOSE:       log the igrid structs to FILE * fp

** FUNCTION NAME: igrid_VerifyInputs
** PURPOSE:       verify the grid sizes and some other stuff

** FUNCTION NAME: igrid_CountRoadPixels
** PURPOSE:       count the number of road pixels

** FUNCTION NAME: igrid_CalculatePercentRoads
** PURPOSE:       calculate road percentage

** FUNCTION NAME: igrid_TestForUrbanYear
** PURPOSE:       test if year matches an urban year

** FUNCTION NAME: igrid_UrbanYear2Index
** PURPOSE:       convert an urban year into an urban index

** FUNCTION NAME: igrid_TestForRoadYear
** PURPOSE:       test if year is a road year

** FUNCTION NAME: igrid_echo_input
** PURPOSE:       routine to echo input grids






---> MODULE NAME:     input.c  <---
==============================================


** FUNCTION NAME: inp_slurp
** PURPOSE:       read count chars from filename into ptr

** FUNCTION NAME: inp_read_restart_file
** PURPOSE:       read the restart file






---> MODULE NAME:     landclass_obj.c  <---
==============================================


** FUNCTION NAME: landclass_MemoryLog
** PURPOSE:       log memory locations onto FILE* fp

** FUNCTION NAME: landclass_GetReducedClassesPtr
** PURPOSE:       return ptr to class_indices

** FUNCTION NAME: landclass_GetClassesPtr
** PURPOSE:       return ptr to landuse_classes

** FUNCTION NAME: landclass_GetNewIndicesPtr
** PURPOSE:       return ptr to new_indices

** FUNCTION NAME: landclass_GetUrbanCode
** PURPOSE:       return the urban code

** FUNCTION NAME: landclass_GetNumLandclasses
** PURPOSE:       return num_landclasses

** FUNCTION NAME: landclass_GetNumReducedclasses
** PURPOSE:       return num_reduced_classes

** FUNCTION NAME: landclass_GetMaxLandclasses
** PURPOSE:       return max_landclass_num

** FUNCTION NAME: landclass_GetClassNum
** PURPOSE:       return landclass num for a given index

** FUNCTION NAME: landclass_IsAlandclass
** PURPOSE:       test if val is a landclass value

** FUNCTION NAME: landclass_GetClassIDX
** PURPOSE:       return idx for a given index

** FUNCTION NAME: landclass_GetClassColor
** PURPOSE:       return color val for given landclass

** FUNCTION NAME: landclass_GetClassEXC
** PURPOSE:       is this an excluded class

** FUNCTION NAME: landclass_GetClassTrans
** PURPOSE:       is this a transition class

** FUNCTION NAME: landclass_GetReducedNum
** PURPOSE:       return class num for given class_indices index

** FUNCTION NAME: landclass_GetReducedIDX
** PURPOSE:       return idx for a given class_indices index

** FUNCTION NAME: landclass_GetReducedColor
** PURPOSE:       return color for given class_indices index

** FUNCTION NAME: landclass_GetReducedEXC
** PURPOSE:       is class at class_indices[i] excluded

** FUNCTION NAME: landclass_GetReducedTrans
** PURPOSE:       is this a transition class

** FUNCTION NAME: landclass_AnnualProbInit
** PURPOSE:       initializes the annual_class_probabilities file with 0's

** FUNCTION NAME: landclass_AnnualProbUpdate
** PURPOSE:       update the annual_prob_filename

** FUNCTION NAME: landclass_BuildProbImage
** PURPOSE:       build prob images from annual_prob_filename

** FUNCTION NAME: landclass_Init
** PURPOSE:       initialization routine for landclasses

** FUNCTION NAME: landclass_SetUrbanCode
** PURPOSE:       set the urban code field

** FUNCTION NAME: landclass_CreateReducedClasses
** PURPOSE:       create the reduced classes

** FUNCTION NAME: landclass_MapLandclassNum_2_idx
** PURPOSE:       CREATE MAPPING FROM LANDUSE CLASS NUM BACK INTO IDX

** FUNCTION NAME: landclassSetNumClasses
** PURPOSE:       set num_landclasses

** FUNCTION NAME: landclassSetName
** PURPOSE:       set name

** FUNCTION NAME: landclassSetType
** PURPOSE:       set Type

** FUNCTION NAME: landclassSetColor
** PURPOSE:       set Color

** FUNCTION NAME: landclassSetGrayscale
** PURPOSE:       set Grayscale

** FUNCTION NAME: landclass_LogIt
** PURPOSE:       log landclass struct to FILE * fp

** FUNCTION NAME: landclass_SetMaxLandclassNum
** PURPOSE:       set the max landclass val






---> MODULE NAME:     main.c  <---
==============================================


** FUNCTION NAME: main
** PURPOSE:       

** FUNCTION NAME: print_usage
** PURPOSE:       help the user

** FUNCTION NAME: catch
** PURPOSE:       catch signals






---> MODULE NAME:     memory_obj.c  <---
==============================================


** FUNCTION NAME: mem_MemoryLog
** PURPOSE:       log memory map to FILE* fp

** FUNCTION NAME: mem_GetPackedBytesPerGrid
** PURPOSE:       return # bytes per grid rounded to a word boundary

** FUNCTION NAME: mem_GetTotalPixels
** PURPOSE:       return total pixel count in a grid

** FUNCTION NAME: mem_GetIGridPtr
** PURPOSE:       return the pointer to the next igrid

** FUNCTION NAME: mem_GetPGridPtr
** PURPOSE:       return ptr to next pgrid

** FUNCTION NAME: mem_GetWGridPtr
** PURPOSE:       return ptr to next wgrid

** FUNCTION NAME: mem_GetWGridFree
** PURPOSE:       

** FUNCTION NAME: mem_Init
** PURPOSE:       initialization routine

** FUNCTION NAME: mem_GetLogFP
** PURPOSE:       return memory log fp

** FUNCTION NAME: mem_CloseLog
** PURPOSE:       close log file

** FUNCTION NAME: mem_CheckMemory
** PURPOSE:       check memory

** FUNCTION NAME: mem_InvalidateCheckArray
** PURPOSE:       invalidate the check memory array elements

** FUNCTION NAME: mem_CheckCheckArray
** PURPOSE:       memory check

** FUNCTION NAME: mem_partition
** PURPOSE:       partition the memory

** FUNCTION NAME: mem_InvalidateGrid
** PURPOSE:       invalidate a grid

** FUNCTION NAME: mem_CheckInvalidateGrid
** PURPOSE:       memory check a grid

** FUNCTION NAME: mem_allocate
** PURPOSE:       allocate memory

** FUNCTION NAME: mem_igrid_push
** PURPOSE:       push igrid onto a stack

** FUNCTION NAME: mem_igrid_pop
** PURPOSE:       pop an igrid from the stack

** FUNCTION NAME: mem_pgrid_push
** PURPOSE:       push a pgrid onto a stack

** FUNCTION NAME: mem_pgrid_pop
** PURPOSE:       pop a pgrid from the stack

** FUNCTION NAME: mem_wgrid_push
** PURPOSE:       push a wgrid onto the stack

** FUNCTION NAME: mem_wgrid_pop
** PURPOSE:       pop a wgrid from the stack

** FUNCTION NAME: mem_ReinvalidateMemory
** PURPOSE:       invalidate the memory

** FUNCTION NAME: memGetBytesPerGridRound
** PURPOSE:       return # bytes per grid rounded to word boundary

** FUNCTION NAME: mem_LogMinFreeWGrids
** PURPOSE:       log the minmum # of free grids

** FUNCTION NAME: mem_LogPartition
** PURPOSE:       log memory partition to FILE * fp_in






---> MODULE NAME:     output.c  <---
==============================================


** FUNCTION NAME: out_write_restart_data
** PURPOSE:       write restart data to filename

** FUNCTION NAME: out_dump
** PURPOSE:       write count chars to filename

** FUNCTION NAME: out_banner
** PURPOSE:       write banner to FILE * fp

** FUNCTION NAME: out_center_text
** PURPOSE:       center text within a given string






---> MODULE NAME:     pgrid_obj.c  <---
==============================================


** FUNCTION NAME: pgrid_MemoryLog
** PURPOSE:       log memory map to FILE* fp

** FUNCTION NAME: pgrid_GetPGridCount
** PURPOSE:       return PGRID_COUNT

** FUNCTION NAME: pgrid_Init
** PURPOSE:       initialize the p type grids

** FUNCTION NAME: pgrid_GetZPtr
** PURPOSE:       return pointer to z grid

** FUNCTION NAME: pgrid_GetDeltatronPtr
** PURPOSE:       return pointer to deltatron grid

** FUNCTION NAME: pgrid_GetDeltaPtr
** PURPOSE:       return pointer to delta grid

** FUNCTION NAME: pgrid_GetLand1Ptr
** PURPOSE:       return pointer to land1 grid

** FUNCTION NAME: pgrid_GetLand2Ptr
** PURPOSE:       return pointer to land2 grid

** FUNCTION NAME: pgrid_GetCumulatePtr
** PURPOSE:       return pointer to cumulate grid






---> MODULE NAME:     proc_obj.c  <---
==============================================


** FUNCTION NAME: proc_MemoryLog
** PURPOSE:       log memory map to FILE* fp

** FUNCTION NAME: proc_SetRestartFlag
** PURPOSE:       set the restart flag variable

** FUNCTION NAME: proc_GetRestartFlag
** PURPOSE:       return the restart flag variable

** FUNCTION NAME: proc_SetProcessingType
** PURPOSE:       set the processing type variable

** FUNCTION NAME: proc_SetTotalRuns
** PURPOSE:       count the total # of runs

** FUNCTION NAME: proc_SetCurrentRun
** PURPOSE:       set the current run variable, current_run

** FUNCTION NAME: proc_SetCurrentMonteCarlo
** PURPOSE:       set current monte carlo variable

** FUNCTION NAME: proc_SetCurrentYear
** PURPOSE:       set current year

** FUNCTION NAME: proc_SetStopYear
** PURPOSE:       set the stop year

** FUNCTION NAME: proc_GetProcessingType
** PURPOSE:       return the processing type

** FUNCTION NAME: proc_GetTotalRuns
** PURPOSE:       return total run count

** FUNCTION NAME: proc_GetCurrentRun
** PURPOSE:       return the current run

** FUNCTION NAME: proc_GetCurrentMonteCarlo
** PURPOSE:       return the current monte carlo

** FUNCTION NAME: proc_GetCurrentYear
** PURPOSE:       return the current year

** FUNCTION NAME: proc_GetStopYear
** PURPOSE:       return the stop year

** FUNCTION NAME: proc_GetLastRun
** PURPOSE:       return last run count

** FUNCTION NAME: proc_GetLastRunFlag
** PURPOSE:       return last run flag; TRUE if this is the last run

** FUNCTION NAME: proc_SetLastMonteCarlo
** PURPOSE:       set last monte carlo run

** FUNCTION NAME: proc_GetLastMonteCarloFlag
** PURPOSE:       return last monte carlo flag

** FUNCTION NAME: proc_SetNumRunsExecThisCPU
** PURPOSE:       set the num runs executed by this cpu

** FUNCTION NAME: proc_GetNumRunsExecThisCPU
** PURPOSE:       return the num runs executed by this cpu

** FUNCTION NAME: proc_IncrementNumRunsExecThisCPU
** PURPOSE:       increment the num runs executed by this cpu

** FUNCTION NAME: proc_IncrementCurrentRun
** PURPOSE:       increment current run variable

** FUNCTION NAME: proc_SetLastMonteCarloFlag
** PURPOSE:       increment current monte carlo variable

** FUNCTION NAME: proc_IncrementCurrentYear
** PURPOSE:       increment current year variable






---> MODULE NAME:     random.c  <---
==============================================


** FUNCTION NAME: ran_random
** PURPOSE:       generate random number

** FUNCTION NAME: InitRandom
** PURPOSE:       initialize random number generator






---> MODULE NAME:     scenario_obj.c  <---
==============================================


** FUNCTION NAME: scen_MemoryLog
** PURPOSE:       log memory map to FILE* fp

** FUNCTION NAME: scen_GetScenarioFilename
** PURPOSE:       return scenario filename

** FUNCTION NAME: scen_GetLogFP
** PURPOSE:       return log file pointer

** FUNCTION NAME: scen_Append2Log
** PURPOSE:       open log for appending

** FUNCTION NAME: scen_GetOutputDir
** PURPOSE:       return output directory

** FUNCTION NAME: scen_GetWhirlgifBinary
** PURPOSE:       return whirlgif_binary

** FUNCTION NAME: scen_GetInputDir
** PURPOSE:       return input directory

** FUNCTION NAME: scen_GetUrbanDataFileCount
** PURPOSE:       return # of urban input files

** FUNCTION NAME: scen_GetRoadDataFileCount
** PURPOSE:       return # road data files

** FUNCTION NAME: scen_GetLanduseDataFileCount
** PURPOSE:       return # landuse data files

** FUNCTION NAME: scen_GetDoingLanduseFlag
** PURPOSE:       return doing landuse flag

** FUNCTION NAME: scen_GetUrbanDataFilename
** PURPOSE:       return urban data filename by index, i

** FUNCTION NAME: scen_GetRoadDataFilename
** PURPOSE:       return road data filename by index, i

** FUNCTION NAME: scen_GetLanduseDataFilename
** PURPOSE:       return landuse data filename by index

** FUNCTION NAME: scen_GetExcludedDataFilename
** PURPOSE:       return excluded data filename by index

** FUNCTION NAME: scen_GetSlopeDataFilename
** PURPOSE:       return slope data filename

** FUNCTION NAME: scen_GetBackgroundDataFilename
** PURPOSE:       return background data filename

** FUNCTION NAME: scen_GetEchoImageFlag
** PURPOSE:       return echo_image_files flag

** FUNCTION NAME: scen_GetWriteColorKeyFlag
** PURPOSE:       return write_color_keys flag

** FUNCTION NAME: scen_GetPostprocessingFlag
** PURPOSE:       return Postprocessing flag

** FUNCTION NAME: scen_GetLogFlag
** PURPOSE:       return Log flag

** FUNCTION NAME: scen_GetEchoFlag
** PURPOSE:       return echo flag

** FUNCTION NAME: scen_GetRandomSeed
** PURPOSE:       return random seed value

** FUNCTION NAME: scen_GetMonteCarloIterations
** PURPOSE:       return # monte carlo iterations

** FUNCTION NAME: scen_GetCoeffDiffusionStart
** PURPOSE:       return diffusion start value

** FUNCTION NAME: scen_GetCoeffBreedStart
** PURPOSE:       return breed start value

** FUNCTION NAME: scen_GetCoeffSpreadStart
** PURPOSE:       return spread start value

** FUNCTION NAME: scen_GetCoeffSlopeResistStart
** PURPOSE:       return slope resistance start value

** FUNCTION NAME: scen_GetCoeffRoadGravityStart
** PURPOSE:       return road gravity start value

** FUNCTION NAME: scen_GetCoeffDiffusionStop
** PURPOSE:       return diffusion stop value

** FUNCTION NAME: scen_GetCoeffBreedStop
** PURPOSE:       return breed stop value

** FUNCTION NAME: scen_GetCoeffSpreadStop
** PURPOSE:       return spread stop value

** FUNCTION NAME: scen_GetCoeffSlopeResistStop
** PURPOSE:       return slope resistance stop value

** FUNCTION NAME: scen_GetCoeffRoadGravityStop
** PURPOSE:       return road gravity stop value

** FUNCTION NAME: scen_GetCoeffDiffusionStep
** PURPOSE:       return diffustion step value

** FUNCTION NAME: scen_GetCoeffBreedStep
** PURPOSE:       return breed step value

** FUNCTION NAME: scen_GetCoeffSpreadStep
** PURPOSE:       return spread step value

** FUNCTION NAME: scen_GetCoeffSlopeResistStep
** PURPOSE:       return slope resistance step value

** FUNCTION NAME: scen_GetCoeffRoadGravityStep
** PURPOSE:       return road gravity step value

** FUNCTION NAME: scen_GetCoeffDiffusionBestFit
** PURPOSE:       return diffusion best fit value

** FUNCTION NAME: scen_GetCoeffBreedBestFit
** PURPOSE:       return breed best fit value

** FUNCTION NAME: scen_GetCoeffSpreadBestFit
** PURPOSE:       return spread best fit value

** FUNCTION NAME: scen_GetCoeffSlopeResistBestFit
** PURPOSE:       return slope resistance best fit value

** FUNCTION NAME: scen_GetCoeffRoadGravityBestFit
** PURPOSE:       return road gravity best fit value

** FUNCTION NAME: scen_GetPredictionStartDate
** PURPOSE:       return prediction start date

** FUNCTION NAME: scen_GetPredictionStopDate
** PURPOSE:       return prediction stop date

** FUNCTION NAME: scen_GetDateColor
** PURPOSE:       return date color

** FUNCTION NAME: scen_GetSeedColor
** PURPOSE:       return seed color

** FUNCTION NAME: scen_GetWaterColor
** PURPOSE:       return water color

** FUNCTION NAME: scen_GetProbabilityColorCount
** PURPOSE:       return # probability color count

** FUNCTION NAME: scen_GetProbabilityColorLowerBound
** PURPOSE:       return lower bound for probability color index, i

** FUNCTION NAME: scen_GetProbabilityColorUpperBound
** PURPOSE:       return upper bound for probability color index, i

** FUNCTION NAME: scen_GetProbabilityColor
** PURPOSE:       return probability color by index

** FUNCTION NAME: scen_GetLogMemoryMapFlag
** PURPOSE:       return log memory map flag

** FUNCTION NAME: scen_GetLogSlopeWeightsFlag
** PURPOSE:       return log slope weights flag

** FUNCTION NAME: scen_GetLogLandclassSummaryFlag
** PURPOSE:       return log landclass summary flag

** FUNCTION NAME: scen_GetLogReadsFlag
** PURPOSE:       return log reads flag

** FUNCTION NAME: scen_GetLogWritesFlag
** PURPOSE:       return log writes flag

** FUNCTION NAME: scen_GetNumLanduseClasses
** PURPOSE:       return num_landuse_classes

** FUNCTION NAME: scen_GetLanduseClassType
** PURPOSE:       return ptr to landuse_class Type

** FUNCTION NAME: scen_GetLanduseClassColor
** PURPOSE:       return landuse_class color

** FUNCTION NAME: scen_GetLanduseClassGrayscale
** PURPOSE:       return landuse_class Grayscale

** FUNCTION NAME: scen_GetLanduseClassName
** PURPOSE:       return ptr to landuse_class name

** FUNCTION NAME: scen_GetLogColortablesFlag
** PURPOSE:       return log colortables flag

** FUNCTION NAME: scen_GetRdGrvtySensitivity
** PURPOSE:       return road gravity sensitivity

** FUNCTION NAME: scen_GetSlopeSensitivity
** PURPOSE:       return slope sensitivity

** FUNCTION NAME: scen_GetCriticalLow
** PURPOSE:       return critical low

** FUNCTION NAME: scen_GetCriticalHigh
** PURPOSE:       return critical high

** FUNCTION NAME: scen_GetCriticalSlope
** PURPOSE:       return log processing status flag

** FUNCTION NAME: scen_GetBoom
** PURPOSE:       return boom value

** FUNCTION NAME: scen_GetBust
** PURPOSE:       return bust value

** FUNCTION NAME: scen_GetWriteCoeffFileFlag
** PURPOSE:       return coeff log flag

** FUNCTION NAME: scen_GetWriteAvgFileFlag
** PURPOSE:       return log processing status flag

** FUNCTION NAME: scen_GetLogBaseStatsFlag
** PURPOSE:       return log base statistics flag

** FUNCTION NAME: scen_GetLogDebugFlag
** PURPOSE:       return log base statistics flag

** FUNCTION NAME: scen_GetLogUrbanizationAttemptsFlag
** PURPOSE:       return log urbanization attempts flag

** FUNCTION NAME: scen_GetLogCoeffFlag
** PURPOSE:       return log coeff flag

** FUNCTION NAME: scen_GetLogTimingsFlag
** PURPOSE:       return log timings flag

** FUNCTION NAME: scen_GetWriteStdDevFileFlag
** PURPOSE:       return log processing status flag

** FUNCTION NAME: scen_GetLogTransitionMatrixFlag
** PURPOSE:       return log processing status flag

** FUNCTION NAME: scen_GetLogProcessingStatusFlag
** PURPOSE:       return log processing status flag

** FUNCTION NAME: scen_GetViewGrowthTypesFlag
** PURPOSE:       return view growth types flag

** FUNCTION NAME: scen_GetViewDeltatronAgingFlag
** PURPOSE:       return view deltatron aging flag

** FUNCTION NAME: scen_GetDeltatronColorCount
** PURPOSE:       return deltatron color count

** FUNCTION NAME: scen_GetDeltatronColor
** PURPOSE:       return deltatron color by index

** FUNCTION NAME: scen_GetPhase0GrowthColor
** PURPOSE:       return scenario.phase0g_growth_color

** FUNCTION NAME: scen_GetPhase1GrowthColor
** PURPOSE:       scenario.phase1g_growth_color

** FUNCTION NAME: scen_GetPhase2GrowthColor
** PURPOSE:       return scenario.phase2g_growth_color

** FUNCTION NAME: scen_GetPhase3GrowthColor
** PURPOSE:       return scenario.phase3g_growth_color

** FUNCTION NAME: scen_GetPhase4GrowthColor
** PURPOSE:       return scenario.phase4g_growth_color

** FUNCTION NAME: scen_GetPhase5GrowthColor
** PURPOSE:       return scenario.phase5g_growth_color

** FUNCTION NAME: scen_init
** PURPOSE:       initialize scenario object

** FUNCTION NAME: scen_read_file
** PURPOSE:       read the scenario file

** FUNCTION NAME: scen_process_user_color
** PURPOSE:       parse the user color input string

** FUNCTION NAME: scen_echo
** PURPOSE:       echo scenario struct to FILE * fp

** FUNCTION NAME: scen_open_log
** PURPOSE:       open the log file

** FUNCTION NAME: scen_open_log
** PURPOSE:       open the log file






---> MODULE NAME:     spread.c  <---
==============================================


** FUNCTION NAME: spr_phase1n3
** PURPOSE:       perform phase 1 & 3 growth types

** FUNCTION NAME: spr_phase4
** PURPOSE:       perform phase 4 growth

** FUNCTION NAME: spr_phase5
** PURPOSE:       perform phase 5 growth

** FUNCTION NAME: spr_get_slp_weights
** PURPOSE:       calculate the slope weights

** FUNCTION NAME: spr_LogSlopeWeights
** PURPOSE:       log slope weights to FILE * fp

** FUNCTION NAME: spr_GetDiffusionValue
** PURPOSE:       calculate the diffusion value

** FUNCTION NAME: spr_GetRoadGravValue
** PURPOSE:       calculate the road gravity value

** FUNCTION NAME: spr_urbanize
** PURPOSE:       try to urbanize a pixel

** FUNCTION NAME: spr_get_neighbor
** PURPOSE:       find a neighboring pixel

** FUNCTION NAME: spr_urbanize_nghbr
** PURPOSE:       try to urbanize a neighbor

** FUNCTION NAME: spr_road_walk
** PURPOSE:       perform road walk

** FUNCTION NAME: spr_road_search
** PURPOSE:       perform road search

** FUNCTION NAME: spr_spiral
** PURPOSE:       generate spiral search pattern

** FUNCTION NAME: spr_spread
** PURPOSE:       main spread routine






---> MODULE NAME:     stats_obj.c  <---
==============================================


** FUNCTION NAME: stats_ConcatenateControlFiles
** PURPOSE:       

** FUNCTION NAME: stats_ConcatenateStdDevFiles () 
** PURPOSE:       

** FUNCTION NAME: stats_ConcatenateAvgFiles
** PURPOSE:       

** FUNCTION NAME: stats_Update
** PURPOSE:       

** FUNCTION NAME: stats_Init
** PURPOSE:       

** FUNCTION NAME: stats_CalStdDev
** PURPOSE:       

** FUNCTION NAME: stats_CalAverages
** PURPOSE:       

** FUNCTION NAME: stats_UpdateRunningTotal
** PURPOSE:       

** FUNCTION NAME: stats_ClearStatsValArrays
** PURPOSE:       

** FUNCTION NAME: stats_GetLeesalee
** PURPOSE:       

** FUNCTION NAME: stats_CalLeesalee
** PURPOSE:       

** FUNCTION NAME: stats_SetNumGrowthPixels
** PURPOSE:       

** FUNCTION NAME: stats_GetNumGrowthPixels
** PURPOSE:       

** FUNCTION NAME: stats_SetPercentUrban
** PURPOSE:       

** FUNCTION NAME: stats_CalPercentUrban
** PURPOSE:       

** FUNCTION NAME: stats_GetPercentUrban
** PURPOSE:       

** FUNCTION NAME: stats_CalGrowthRate
** PURPOSE:       

** FUNCTION NAME: stats_GetGrowthRate
** PURPOSE:       

** FUNCTION NAME: stats_SetSNG
** PURPOSE:       

** FUNCTION NAME: stats_SetSDG
** PURPOSE:       

** FUNCTION NAME: stats_SetOG
** PURPOSE:       

** FUNCTION NAME: stats_SetRT
** PURPOSE:       

** FUNCTION NAME: stats_SetPOP
** PURPOSE:       

** FUNCTION NAME: stats_GetSNG
** PURPOSE:       

** FUNCTION NAME: stats_GetSDG
** PURPOSE:       

** FUNCTION NAME: stats_GetOG
** PURPOSE:       

** FUNCTION NAME: stats_GetRT
** PURPOSE:       

** FUNCTION NAME: stats_GetPOP
** PURPOSE:       

** FUNCTION NAME: stats_SetArea
** PURPOSE:       

** FUNCTION NAME: stats_SetEdges
** PURPOSE:       

** FUNCTION NAME: stats_SetClusters
** PURPOSE:       

** FUNCTION NAME: stats_SetPop
** PURPOSE:       

** FUNCTION NAME: stats_SetXmean
** PURPOSE:       

** FUNCTION NAME: stats_SetYmean
** PURPOSE:       

** FUNCTION NAME: stats_SetRad
** PURPOSE:       

** FUNCTION NAME: stats_SetAvgSlope
** PURPOSE:       

** FUNCTION NAME: stats_SetMeanClusterSize
** PURPOSE:       

** FUNCTION NAME: stats_GetArea
** PURPOSE:       

** FUNCTION NAME: stats_GetEdges 
** PURPOSE:       

** FUNCTION NAME: stats_GetClusters
** PURPOSE:       

** FUNCTION NAME: stats_GetPop
** PURPOSE:       

** FUNCTION NAME: stats_GetXmean
** PURPOSE:       

** FUNCTION NAME: stats_GetYmean
** PURPOSE:       

** FUNCTION NAME: stats_GetRad
** PURPOSE:       

** FUNCTION NAME: stats_GetAvgSlope
** PURPOSE:       

** FUNCTION NAME: stats_GetMeanClusterSize
** PURPOSE:       

** FUNCTION NAME: stats_ComputeThisYearStats
** PURPOSE:       

** FUNCTION NAME: stats_CreateControlFile
** PURPOSE:       

** FUNCTION NAME: stats_CreateStatsValFile
** PURPOSE:       

** FUNCTION NAME: stats_WriteStatsValLine
** PURPOSE:       

** FUNCTION NAME: stats_LogStatInfoHdr
** PURPOSE:       

** FUNCTION NAME: stats_LogStatValHdr
** PURPOSE:       

** FUNCTION NAME: stats_LogStatInfo
** PURPOSE:       

** FUNCTION NAME: stats_LogStatVal
** PURPOSE:       

** FUNCTION NAME: stats_LogAverages
** PURPOSE:       

** FUNCTION NAME: stats_LogThisYearStats
** PURPOSE:       

** FUNCTION NAME: stats_LogRecord
** PURPOSE:       

** FUNCTION NAME: stats_compute_leesalee
** PURPOSE:       

** FUNCTION NAME: stats_Analysis
** PURPOSE:       

** FUNCTION NAME: stats_Dump
** PURPOSE:       

** FUNCTION NAME: stats_LogControlStatsHdr
** PURPOSE:       

** FUNCTION NAME: stats_LogControlStats
** PURPOSE:       

** FUNCTION NAME: stats_DoAggregate
** PURPOSE:       

** FUNCTION NAME: stats_DoRegressions
** PURPOSE:       

** FUNCTION NAME: stats_Save
** PURPOSE:       

** FUNCTION NAME: stats_ProcessGrowLog
** PURPOSE:       

** FUNCTION NAME: stats_linefit
** PURPOSE:       

** FUNCTION NAME: stats_ComputeBaseStats
** PURPOSE:       

** FUNCTION NAME: stats_compute_stats
** PURPOSE:       

** FUNCTION NAME: stats_edge
** PURPOSE:       

** FUNCTION NAME: stats_circle
** PURPOSE:       

** FUNCTION NAME: stats_MemoryLog
** PURPOSE:       

** FUNCTION NAME: stats_cluster
** PURPOSE:       

** FUNCTION NAME: stats_LogBaseStats
** PURPOSE:       

** FUNCTION NAME: stats_WriteControlStats
** PURPOSE:       

** FUNCTION NAME: stats_InitUrbanizationAttempts
** PURPOSE:       

** FUNCTION NAME: stats_LogUrbanizationAttempts
** PURPOSE:       

** FUNCTION NAME: stats_IncrementUrbanSuccess
** PURPOSE:       

** FUNCTION NAME: stats_IncrementZFailure
** PURPOSE:       

** FUNCTION NAME: stats_IncrementDeltaFailure
** PURPOSE:       

** FUNCTION NAME: stats_IncrementSlopeFailure
** PURPOSE:       

** FUNCTION NAME: stats_IncrementEcludedFailure
** PURPOSE:       






---> MODULE NAME:     timer_obj.c  <---
==============================================


** FUNCTION NAME: timer_MemoryLog
** PURPOSE:       log memory map to FILE* fp

** FUNCTION NAME: timer_Init
** PURPOSE:       initialize timers

** FUNCTION NAME: timer_Start
** PURPOSE:       start a timer

** FUNCTION NAME: timer_Read
** PURPOSE:       read a timer

** FUNCTION NAME: timer_Stop
** PURPOSE:       stop a timer

** FUNCTION NAME: timer_LogIt
** PURPOSE:       log timer results to FILE * fp






---> MODULE NAME:     transition_obj.c  <---
==============================================


** FUNCTION NAME: trans_MemoryLog
** PURPOSE:       log memory map to FILE* fp

** FUNCTION NAME: trans_GetClassSlope
** PURPOSE:       return class slope

** FUNCTION NAME: trans_GetFTransition
** PURPOSE:       return ftransition

** FUNCTION NAME: trans_Init
** PURPOSE:       driver to initialize transition matrix

** FUNCTION NAME: trans_transition
** PURPOSE:       initialize the transition matrix

** FUNCTION NAME: trans_LogTransition
** PURPOSE:       log transition matrix to FILE * fp






---> MODULE NAME:     utilities.c  <---
==============================================


** FUNCTION NAME: util_copy_grid
** PURPOSE:       copy grid from source to target

** FUNCTION NAME: util_init_grid
** PURPOSE:       initialize a grid with value

** FUNCTION NAME: util_condition_gif
** PURPOSE:       set the pixels in target based on values in source grid

** FUNCTION NAME: util_img_intersection
** PURPOSE:       count the # of similar pixels in two given grids

** FUNCTION NAME: util_count_pixels
** PURPOSE:       count pixels meeting option & value conditionals

** FUNCTION NAME: util_merge_background
** PURPOSE:       merge the background image with the foreground image

** FUNCTION NAME: util_trim
** PURPOSE:       trim string from left and right

** FUNCTION NAME: util_get_neighbor
** PURPOSE:       return a randomly selected neighbor

** FUNCTION NAME: util_count_neighbors
** PURPOSE:       count the neighbors meeting certain criteria

** FUNCTION NAME: util_get_next_neighbor
** PURPOSE:       return next neighbor in a sequence

** FUNCTION NAME: util_map_gridpts_2_index
** PURPOSE:       map selected pixels into a new index

** FUNCTION NAME: util_overlay
** PURPOSE:       overlay one image onto another

** FUNCTION NAME: util_AllCAPS
** PURPOSE:       convert a string to all caps

** FUNCTION NAME: util_WriteZProbGrid
** PURPOSE:       write probability grid

** FUNCTION NAME: util_overlay_seed
** PURPOSE:       overlay the seed onto a probability image






---> MODULE NAME:     wgrid_obj.c  <---
==============================================


** FUNCTION NAME: wgrid_GetWGridCount
** PURPOSE:       return num_working_grids

** FUNCTION NAME: wgrid_SetWGridCount
** PURPOSE:       set num_working_grids



***** The number of member functions listed was: 466 .


